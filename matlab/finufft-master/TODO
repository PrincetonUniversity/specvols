Current list of items to do for FINUFFT library
===============================================


TRACTABLE USER PROJECTS - PLEASE HELP:

* speed up (relative to NFFT) the FFTW call for small problems - ie diagnose and fix why the FFTW call is slower than same-sized FFTW from NFFT. This can be
seen when N<M. This applies even in 2D, so can't be due to deconvolution (which scales w/ N).

* Make multi-source-strength version, which makes decision for small M*N to use GEMM,
and fftw_many with one spreader-per-threads for medium size. For cryo appl.

* Add a real-valued spreader option which will be faster and use half the RAM: but how avoid code duplication? - C++ template the spreader and all inside it?

* GPU spreader.

* Professionalize the single-precision version:
 - fix matlab, octave, and python interfaces for single-prec.

* Get huge arrays >2^31 working in 2d,3d in C++, and for any d in MATLAB/octave.

* R interface?

* support for OSX and Windows.

* Package as RPM and .deb for linux


HIGH PRIORITY TODO: (also see above)

* check the slow speed for fancy t1 spreader when doing nothing, eg
test/spreadtestnd 1 1e8 1e7 1e-6 0 9 1
Ie, decide to switch out fancy t1 spreader sometimes? Yes, make basic spreader.
* host at FI github.
* Work on Mac OSX: 1) fix: `make lib` fails to make the shared object library (.so), 2) ship .mexmaci64, 3) understand why clang needs _Complex removed.
* release, outreach, users, NA-Digest


LOWER PRIORITY TODO:

* understand why two modeords not give bit-wise same answers in check_modeords.m (really why it's stochastic either exactly zero or around 1e-13)
* Decide if non vs omp get different lib names? not yet
* check possible transpose convention for 2d,3d, found by David S.
* Intel MKL FFT interface option instead of FFTW?
* swap out mallocs for std:vector in finufft?
* recoup DFM's PyPI publishing of finufftpy, maybe awkward
* figure why matlab/MEX gives zero answers for >=2e31 array sizes (big1dtest.m), and then change .mw to use inout with allocation by matlab, to bypass the mwrap reliance on int 32 type.
* test huge arrays >=2^31 2d, 3d in C++.
* test huge arrays >=2^31 in octave/mex.
* allow fortran interface to access >=2^31 arrays; make int*8 default in interface?
* make common.cpp shuffle routines dcomplex interface and native dcomplex arith (remove a bunch of 2* in indexing, and have no fftw_complex refs in them. However, need first to make sure using complex divide isn't slower than real divide used now). Fix the calling from finufft?d?
* figure out how to set up path to link to shared library - rpath?
* MS Windows test
* rewrite fftw3 plans via 64bit guru interface to allow eg 1024^3 type 1 or 2 in 3D. Not sure needed (only for huge 1d transforms). see http://www.fftw.org/fftw3_doc/Guru-Interface.html#Guru-Interface
